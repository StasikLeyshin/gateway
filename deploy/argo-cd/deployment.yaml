apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      volumes:
        - name: vol
          hostPath:
            path: /opt/gateway
      containers:
        - name: k3s-demo1
          image: 192.168.1.41/gateway:v0.0.17-4-ge29d832
          imagePullPolicy: Always
          volumeMounts:
            - name: vol
              mountPath: /deploy
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - cp -R /config /deploy

          env:
            - name: IS_DEPLOY
              value: 'TRUE'
            - name: DEPLOY_PATH
              value: 'deploy'
#          command:
#            - /bin/sh
#            - -c
#            #- ls
#            #- mkdir -p /opt/gateway/config1
#            - cp -R /config /config1
#            - ls
              #subPath: config/config.local.yaml
#          volumeMounts:
#            - name: fabric-volume
#              mountPath: /opt/gateway/config
#              subPath: config
#              readOnly: false
#      volumes:
#        - name: fabric-volume
#          persistentVolumeClaim:
#            readOnly: false
#            claimName: fabric-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: default
spec:
  ports:
    - name: http
      targetPort: 5005
      port: 5005
  selector:
    app: gateway
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway

spec:
  ingressClassName: nginx
  rules:
    - host: gateway.ms.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gateway
                port:
                  number: 5005
#---
#
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: mongodb
#spec:
#  serviceName: mongodb-service
#  replicas: 1
#  selector:
#    matchLabels:
#      app: mongodb
#  template:
#    metadata:
#      labels:
#        app: mongodb
#    spec:
#      containers:
#        - name: mongodb
#          image: mongo:8.0
#          ports:
#            - containerPort: 27017
#          volumeMounts:
#            - name: mongodb-data
#              mountPath: /data/db
#  volumeClaimTemplates:
#    - metadata:
#        name: mongodb-data
#        annotations:
#          volume.beta.kubernetes.io/storage-class: standard
#      spec:
#        accessModes: [ "ReadWriteOnce" ]
#        resources:
#          requests:
#            storage: 1Gi

#---
#apiVersion: apps/v1beta1
#kind: StatefulSet
#metadata:
#  name: mongo
#spec:
#  selector:
#    matchLabels:
#      role: mongo
#      environment: test
#  serviceName: "mongo"
#  replicas: 3
#  template:
#    metadata:
#      labels:
#        role: mongo
#        environment: test
#    spec:
#      terminationGracePeriodSeconds: 10
#      containers:
#        - name: mongo
#          image: mongo:8.0
#          command:
#            - mongod
#            - "--replSet"
#            - rs0
#            - "--smallfiles"
#            - "--noprealloc"
#          ports:
#            - containerPort: 27017
#          volumeMounts:
#            - name: mongo-persistent-storage
#              mountPath: /data/db
#        - name: mongo-sidecar
#          image: cvallance/mongo-k8s-sidecar
#          env:
#            - name: MONGO_SIDECAR_POD_LABELS
#              value: "role=mongo,environment=test"
#  volumeClaimTemplates:
#    - metadata:
#        name: mongo-persistent-storage
#      spec:
#        storageClassName: "fast"
#        accessModes: ["ReadWriteOnce"]
#        resources:
#          requests:
#            storage: 100Gi